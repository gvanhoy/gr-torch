/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(triton_block.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f7050ebd5d1330b1a61365b9b161f3be)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <torchdsp/triton_block.h>
// pydoc.h is automatically generated in the build directory
#include <triton_block_pydoc.h>

void bind_triton_block(py::module& m) {

    using triton_block = ::gr::torchdsp::triton_block;


    py::class_<
        triton_block,
        gr::sync_block,
        gr::block,
        gr::basic_block,
        std::shared_ptr<triton_block>>(m, "triton_block", D(triton_block))

        .def(
            py::init(&triton_block::make),
            py::arg("model_name"),
            py::arg("max_batch_size"),
            py::arg("triton_url") = "localhost:8000",
            py::arg("input_sizes") = py::array_t<int>(),
            py::arg("output_sizes") = py::array_t<int>(),
            D(triton_block, make))


        ;
}
